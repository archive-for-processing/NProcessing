<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nebulator.Common</name>
    </assembly>
    <members>
        <member name="T:Nebulator.Common.Bag">
            <summary>
            General purpose storage for things using a two part key.
            </summary>
        </member>
        <member name="F:Nebulator.Common.Bag._fn">
            <summary>The file name.</summary> 
        </member>
        <member name="P:Nebulator.Common.Bag.Values">
            <summary>Misc dynamic values that we want to persist. Needs to be public so serializer can see it.</summary>
        </member>
        <member name="M:Nebulator.Common.Bag.Clear">
            <summary>
            Reset everything.
            </summary>
        </member>
        <member name="M:Nebulator.Common.Bag.GetValue(System.String,System.String)">
            <summary>
            Lazy helper.
            </summary>
            <param name="owner"></param>
            <param name="valname"></param>
            <returns>value</returns>
        </member>
        <member name="M:Nebulator.Common.Bag.SetValue(System.String,System.String,System.Object)">
            <summary>
            Lazy helper.
            </summary>
            <param name="owner"></param>
            <param name="valname"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nebulator.Common.Bag.MakeKey(System.String,System.String)">
            <summary>
            Common key maker.
            </summary>
            <param name="owner"></param>
            <param name="valname"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Bag.Save">
            <summary>
            Save to json file.
            </summary>
        </member>
        <member name="M:Nebulator.Common.Bag.Load(System.String)">
            <summary>
            Create from json file.
            </summary>
        </member>
        <member name="M:Nebulator.Common.Extensions.IsInteger(System.String)">
            <summary>
            Test for integer string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Extensions.IsAlpha(System.String)">
            <summary>
            Test for alpha string.
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Extensions.Right(System.String,System.Int32)">
            <summary>
            Returns the rightmost characters of a string based on the number of characters specified.
            </summary>
            <param name="str">The source string to return characters from.</param>
            <param name="numChars">The number of rightmost characters to return.</param>
            <returns>The rightmost characters of a string.</returns>
        </member>
        <member name="M:Nebulator.Common.Extensions.Left(System.String,System.Int32)">
            <summary>
            Returns the leftmost number of chars in the string.
            </summary>
            <param name="str">The source string .</param>
            <param name="numChars">The number of characters to get from the source string.</param>
            <returns>The leftmost number of characters to return from the source string supplied.</returns>
        </member>
        <member name="M:Nebulator.Common.Extensions.SplitByTokens(System.String,System.String,System.Boolean)">
            <summary>
            Splits a tokenized (delimited) string into its parts and optionally trims whitespace.
            </summary>
            <param name="text">The string to split up.</param>
            <param name="tokens">The char token(s) to split by.</param>
            <param name="trim">Remove whitespace at each end.</param>
            <returns>Return the parts as a list.</returns>
        </member>
        <member name="M:Nebulator.Common.Extensions.SplitByToken(System.String,System.String,System.Boolean)">
            <summary>
            Splits a tokenized (delimited) string into its parts and optionally trims whitespace.
            </summary>
            <param name="text">The string to split up.</param>
            <param name="splitby">The string to split by.</param>
            <param name="trim">Remove whitespace at each end.</param>
            <returns>Return the parts as a list.</returns>
        </member>
        <member name="M:Nebulator.Common.Extensions.DeepClone``1(``0)">
            <summary>
            Perform a blind deep copy of an object. The class must be marked as [Serializable] in order for this to work.
            There are many ways to do this: http://stackoverflow.com/questions/129389/how-do-you-do-a-deep-copy-an-object-in-net-c-specifically/11308879
            The binary serialization is apparently slower but safer. Feel free to reimplement with a better way.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Extensions.UpdateMru(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Update the MRU.
            </summary>
            <param name="mruList">The MRU.</param>
            <param name="newVal">New value(s) to perhaps insert.</param>
        </member>
        <member name="T:Nebulator.Common.LogClientNotificationTarget">
            <summary>Handles writes to the client.</summary>
        </member>
        <member name="T:Nebulator.Common.LogClientNotificationTarget.ClientNotificationEventHandler">
            <summary>Definition of delegate for event handler.</summary>
            <param name="msg">The message to send</param>
        </member>
        <member name="E:Nebulator.Common.LogClientNotificationTarget.ClientNotification">
            <summary>The event handler for messages back to the client.</summary>
        </member>
        <member name="M:Nebulator.Common.LogClientNotificationTarget.Write(NLog.LogEventInfo)">
            <summary>Send the event to the client for display.</summary>
            <param name="logEvent">Describes the event.</param>
        </member>
        <member name="T:Nebulator.Common.MultiFileWatcher">
            <summary>
            A watcher for multiple file changes. The underlying FileSystemWatcher is a bit sensitive to OS file system ops.
            </summary>
        </member>
        <member name="E:Nebulator.Common.MultiFileWatcher.FileChangeEvent">
            <summary>Reporting a change to listeners.</summary>
        </member>
        <member name="F:Nebulator.Common.MultiFileWatcher._watchers">
            <summary>Detect changed composition file.</summary>
        </member>
        <member name="F:Nebulator.Common.MultiFileWatcher._timer">
            <summary>Used to delay reporting to client as there can be multiple events for one file change.</summary>
        </member>
        <member name="F:Nebulator.Common.MultiFileWatcher._touchedFiles">
            <summary>Set by subordinate watchers.</summary>
        </member>
        <member name="F:Nebulator.Common.MultiFileWatcher.DELAY">
            <summary>The delay before reporting. Seems like a reasonable number for human edit interface.</summary>
        </member>
        <member name="F:Nebulator.Common.MultiFileWatcher._disposed">
            <summary>Resource clean up.</summary>
        </member>
        <member name="M:Nebulator.Common.MultiFileWatcher.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MultiFileWatcher.Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handle timer tick. Sends event out if any constituents triggered.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nebulator.Common.MultiFileWatcher.Add(System.String)">
            <summary>
            Add anew listener.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Nebulator.Common.MultiFileWatcher.Clear">
            <summary>
            Remove all listeners.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MultiFileWatcher.Watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handle underlying change notification.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nebulator.Common.MultiFileWatcher.Dispose">
            <summary>
            Resource clean up.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MultiFileWatcher.Dispose(System.Boolean)">
            <summary>
            Resource clean up.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Nebulator.Common.TimerCaps">
            <summary>
            Represents information about the multimedia timer capabilities.
            </summary>
        </member>
        <member name="F:Nebulator.Common.TimerCaps.periodMin">
            <summary>
            Minimum supported period in milliseconds.
            </summary>
        </member>
        <member name="F:Nebulator.Common.TimerCaps.periodMax">
            <summary>
            Maximum supported period in milliseconds.
            </summary>
        </member>
        <member name="T:Nebulator.Common.MmTimerEx">
            <summary>
            The win multimedia timer is erratic. This class attempts to reduce the error by running at one msec
            and managing the requested periods manually. This is accomplished by using a Stopwatch to actually
            measure the elapsed time rather than trust the mm timer period. It seems to be an improvement.
            Also see "Microsecond and Millisecond C# Timer - CodeProject.html". Good accuracy at the expense of a whole core.
            </summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx.TimerInstance.period">
            <summary>The time between events in msec.</summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx.TimerInstance.current">
            <summary>Accumulated msec.</summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx._timers">
            <summary>All the timer instances. Key is id.</summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx._sw">
            <summary>Used for more accurate timing.</summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx._running">
            <summary>Indicates whether or not the timer is running.</summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx._lastTicks">
            <summary>Stopwatch support.</summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx._disposed">
            <summary>Indicates whether or not the timer has been disposed.</summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx.MMTIMER_PERIOD">
            <summary>Msec for mm timer tick.</summary>
        </member>
        <member name="E:Nebulator.Common.MmTimerEx.TimerElapsedEvent">
            <summary>Occurs when the time period has elapsed.</summary>
        </member>
        <member name="T:Nebulator.Common.MmTimerEx.TimerEventArgs">
            <summary>FastTimer event args.</summary>
        </member>
        <member name="P:Nebulator.Common.MmTimerEx.TimerEventArgs.ElapsedTimers">
            <summary>Elapsed timers.</summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx._timerID">
            <summary>
            Multimedia timer identifier.
            </summary>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx._resolution">
            <summary>
            Timer resolution in milliseconds. The resolution increases with smaller values - a resolution of 0
            indicates periodic events should occur with the greatest possible accuracy. To reduce system 
            overhead, however, you should use the maximum value appropriate for your application.
            </summary>
        </member>
        <member name="T:Nebulator.Common.MmTimerEx.TimeProc">
            <summary>
            Called by Windows when a mm timer event occurs.
            </summary>
            <param name="id"></param>
            <param name="msg"></param>
            <param name="user"></param>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="F:Nebulator.Common.MmTimerEx._timeProc">
            <summary>
            Called by Windows when a mm timer event occurs.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.timeSetEvent(System.Int32,System.Int32,Nebulator.Common.MmTimerEx.TimeProc,System.IntPtr,System.Int32)">
            <summary>Start her up.</summary>
            <param name="delay">Event delay, in milliseconds.If this value is not in the range of the minimum and maximum event delays supported by the timer, the function returns an error.</param>
            <param name="resolution">Resolution of the timer event, in milliseconds. The resolution increases with smaller values; a resolution of 0 indicates periodic events should occur with the greatest possible accuracy. To reduce system overhead, however, you should use the maximum value appropriate for your application.</param>
            <param name="proc">Pointer to a callback function that is called once upon expiration of a single event or periodically upon expiration of periodic events.</param>
            <param name="user">User-supplied callback data.</param>
            <param name="mode">Timer event type.</param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.#ctor">
            <summary>
            Initializes a new instance of the Timer class.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.Dispose">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.Dispose(System.Boolean)">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.SetTimer(System.String,System.Int32)">
            <summary>
            Add a new timer instance.
            </summary>
            <param name="id">Arbitrary id as string</param>
            <param name="period"></param>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.Start">
            <summary>
            Starts the periodic timer.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.Stop">
            <summary>
            Stops timer.
            </summary>
        </member>
        <member name="M:Nebulator.Common.MmTimerEx.MmTimerCallback(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Multimedia timer callback. Don't trust the accuracy of the mm timer so measure actual using a stopwatch.
            </summary>
            <param name="id">The identifier of the timer. The identifier is returned by the timeSetEvent function.</param>
            <param name="msg">Reserved.</param>
            <param name="user">The value that was specified for the dwUser parameter of the timeSetEvent function.</param>
            <param name="param1">Reserved.</param>
            <param name="param2">Reserved.</param>
        </member>
        <member name="P:Nebulator.Common.NoteUtils._scriptNoteDefs">
            <summary>Chord and scale definitions added from the script. Value is list of constituent notes.</summary>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.AddScriptNoteDef(System.String,System.String)">
            <summary>
            Add a chord or scale definition from the script.
            </summary>
            <param name="name">"MY_CHORD"</param>
            <param name="parts">"1 4 6 b13"</param>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.ParseNoteString(System.String)">
            <summary>
            Parse note or notes from input value. Checks both stock items and those defined in the script.
            </summary>
            <param name="noteString">String to parse.</param>
            <returns>List of note numbers - empty if invalid.</returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.GetScaleNotes(System.String,System.String)">
            <summary>
            Create a list of absolute note numbers for given scale name. Checks both stock items and those defined in the script.
            </summary>
            <param name="scale">Name of the scale.</param>
            <param name="key">Key.octave</param>
            <returns>List of scale notes - empty if invalid.</returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.IsNatural(System.Int32)">
            <summary>
            Is it a white key?
            </summary>
            <param name="notenum">Which note</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.FormatNotes(System.Collections.Generic.List{System.Int32})">
            <summary>
            Try to make a note and/or chord string from the param. If it can't find a chord return the individual notes.
            </summary>
            <param name="notes"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.FormatDrum(System.Int32)">
            <summary>
            Convert note number to corresponding drum name.
            </summary>
            <param name="note"></param>
            <returns>The drum name</returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.SplitNoteNumber(System.Int32)">
            <summary>
            Split a midi note number into root note and octave.
            </summary>
            <param name="notenum">Absolute note number</param>
            <returns>tuple of root and octave</returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.GetInterval(System.String)">
            <summary>
            Get interval offset from name.
            </summary>
            <param name="sinterval"></param>
            <returns>Offset or null if invalid.</returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.GetInterval(System.Int32)">
            <summary>
            Get interval name from note number offset.
            </summary>
            <param name="iint">The name or empty if invalid.</param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.NoteNameToNumber(System.String)">
            <summary>
            Convert note name into number.
            </summary>
            <param name="snote">The root of the note without octave.</param>
            <returns>The number or null if invalid.</returns>
        </member>
        <member name="M:Nebulator.Common.NoteUtils.NoteNumberToName(System.Int32)">
            <summary>
            Convert note number into name.
            </summary>
            <param name="inote"></param>
            <returns></returns>
        </member>
        <member name="P:Nebulator.Common.ScriptDefinitions.TheDefinitions">
            <summary>Current global defs.</summary>
        </member>
        <member name="P:Nebulator.Common.ScriptDefinitions.InstrumentDefs">
            <summary>The midi instrument definitions from ScriptDefinitions.md.</summary>
        </member>
        <member name="P:Nebulator.Common.ScriptDefinitions.DrumDefs">
            <summary>The midi drum definitions from ScriptDefinitions.md.</summary>
        </member>
        <member name="P:Nebulator.Common.ScriptDefinitions.ControllerDefs">
            <summary>The midi controller definitions from ScriptDefinitions.md.</summary>
        </member>
        <member name="P:Nebulator.Common.ScriptDefinitions.ChordDefs">
            <summary>The chord definitions from ScriptDefinitions.md. Key is chord name, Value is list of constituent notes.</summary>
        </member>
        <member name="P:Nebulator.Common.ScriptDefinitions.ScaleDefs">
            <summary>The scale definitions from ScriptDefinitions.md. Key is scale name, Value is list of constituent notes.</summary>
        </member>
        <member name="P:Nebulator.Common.ScriptDefinitions.NoteControl">
            <summary>Helper for internals.</summary>
        </member>
        <member name="P:Nebulator.Common.ScriptDefinitions.PitchControl">
            <summary>Helper for internals.</summary>
        </member>
        <member name="M:Nebulator.Common.ScriptDefinitions.Init">
            <summary>
            Load chord and midi definitions from md doc file.
            </summary>
        </member>
        <member name="T:Nebulator.Common.FormInfo">
            <summary>
            General purpose container for persistence.
            </summary>
        </member>
        <member name="T:Nebulator.Common.CheckBoxRenderer">
            <summary>
            Custom renderer for toolstrip checkbox color.
            </summary>
        </member>
        <member name="T:Nebulator.Common.TimingAnalyzer">
            <summary>Diagnostics for timing measurement.</summary>
        </member>
        <member name="F:Nebulator.Common.TimingAnalyzer._watch">
            <summary>The internal timer.</summary>
        </member>
        <member name="F:Nebulator.Common.TimingAnalyzer._lastTicks">
            <summary>Last grab time for calculating diff.</summary>
        </member>
        <member name="P:Nebulator.Common.TimingAnalyzer.SampleSize">
            <summary>Number of data points to grab for statistics.</summary>
        </member>
        <member name="P:Nebulator.Common.TimingAnalyzer.Times">
            <summary>Accumulated data points.</summary>
        </member>
        <member name="P:Nebulator.Common.TimingAnalyzer.Mean">
            <summary>Mean in msec.</summary>
        </member>
        <member name="P:Nebulator.Common.TimingAnalyzer.Min">
            <summary>Min in msec.</summary>
        </member>
        <member name="P:Nebulator.Common.TimingAnalyzer.Max">
            <summary>Max in msec.</summary>
        </member>
        <member name="P:Nebulator.Common.TimingAnalyzer.SD">
            <summary>SD in msec.</summary>
        </member>
        <member name="M:Nebulator.Common.TimingAnalyzer.ToString">
            <summary>Readable.</summary>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.TimingAnalyzer.Stop">
            <summary>
            Stop accumulator.
            </summary>
        </member>
        <member name="M:Nebulator.Common.TimingAnalyzer.Arm">
            <summary>
            Execute this before measuring the duration of something.
            </summary>
        </member>
        <member name="M:Nebulator.Common.TimingAnalyzer.ReadOne">
            <summary>
            Do one read since Arm().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.TimingAnalyzer.Grab">
            <summary>
            Grab a data point. Also auto starts the timer.
            </summary>
            <returns>New stats are available.</returns>
        </member>
        <member name="T:Nebulator.Common.ListSelectorX">
            <summary
            >Plugin to property grid.
            </summary>
        </member>
        <member name="P:Nebulator.Common.ListSelectorX.Options">
            <summary>The owner supplies the listbox contents using this. A bit kludgy... TODO fix?</summary>
        </member>
        <member name="T:Nebulator.Common.StringListEditor">
            <summary>
            Plug in to property grid. String list is edited as a newline delimited string.
            </summary>
        </member>
        <member name="F:Nebulator.Common.UserSettings._fn">
            <summary>The file name.</summary>
        </member>
        <member name="P:Nebulator.Common.UserSettings.TheSettings">
            <summary>Current global user settings.</summary>
        </member>
        <member name="M:Nebulator.Common.UserSettings.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Nebulator.Common.UserSettings.Save">
            <summary>Save object to file.</summary>
        </member>
        <member name="M:Nebulator.Common.UserSettings.Load(System.String)">
            <summary>Create object from file.</summary>
        </member>
        <member name="T:Nebulator.Common.Utils">
            <summary>
            Static utility functions.
            </summary>
        </member>
        <member name="F:Nebulator.Common.Utils.UNKNOWN_STRING">
            <summary>General purpose marker.</summary>
        </member>
        <member name="M:Nebulator.Common.Utils.TestForNumber_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Allows user to enter only integer or float values.
            s</summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Nebulator.Common.Utils.TestForInteger_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Allows user to enter only integer values.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Nebulator.Common.Utils.TestForAlphanumeric_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>Allows user to enter only alphanumeric values.</summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Nebulator.Common.Utils.GetVersionString">
            <summary>
            Returns a string with the application version information.
            </summary>
        </member>
        <member name="M:Nebulator.Common.Utils.GetAppDataDir">
            <summary>
            Get the user app dir.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.GetExeDir">
            <summary>
            Get the executable dir.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.SwapUInt32(System.UInt32)">
            <summary>
            Endian support.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.SwapUInt16(System.UInt16)">
            <summary>
            Endian support.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.SplitDouble(System.Double)">
            <summary>
            Split a double into two parts: each side of the dp.
            </summary>
            <param name="val"></param>
            <returns>tuple of integral and fractional</returns>
        </member>
        <member name="M:Nebulator.Common.Utils.KeyToChar(System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>General purpose decoder for keys. Because windows makes it kind of difficult.</summary>
            <param name="key"></param>
            <param name="modifiers"></param>
            <returns>Tuple of Converted char (0 if not convertible) and keyCode(s).</returns>
        </member>
        <member name="M:Nebulator.Common.Utils.GetKeyState(System.Windows.Forms.Keys)">
            <summary>Key state query. Based on https://stackoverflow.com/a/9356006.</summary>
            <param name="key">Which key.</param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.TicksToMsec(System.Int64)">
            <summary>
            Conversion.
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.FormatSourceCode(System.Collections.Generic.List{System.String})">
            <summary>Rudimentary C# source code formatter to make generated files somewhat readable.</summary>
            <param name="src">Lines to prettify.</param>
            <returns>Formatted lines.</returns>
        </member>
        <member name="M:Nebulator.Common.Utils.ResizeImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>Resize the image to the specified width and height.</summary>
            <param name="image">The image to resize.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <returns>The resized image.</returns>
        </member>
        <member name="M:Nebulator.Common.Utils.ColorizeBitmap(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Colorize a bitmap.
            </summary>
            <param name="original"></param>
            <param name="newcol"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.HalfMix(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Mix two colors.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.GetSequenceColor(System.Int32,System.Boolean)">
            <summary>Helper to get next contrast color in the sequence. From http://colorbrewer2.org qualitative.</summary>
            <param name="i"></param>
            <param name="dark">Dark or light series, usually dark.</param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.DegreesToRadians(System.Single)">
            <summary>Conversion.</summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.RadiansToDegrees(System.Single)">
            <summary>Conversion.</summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.Map(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.Map(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Remap a value to new coordinates.
            </summary>
            <param name="val"></param>
            <param name="start1"></param>
            <param name="stop1"></param>
            <param name="start2"></param>
            <param name="stop2"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate a Standard Deviation based on a List of doubles.
            </summary>
            <param name="inputArray">List of doubles</param>
            <returns>Double value of the Standard Deviation</returns>
        </member>
        <member name="M:Nebulator.Common.Utils.SumOfSquares(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculate a Sum of Squares given a List of doubles.
            </summary>
            <param name="inputArray">List of doubles</param>
            <returns>Double value of the Sum of Squares</returns>
        </member>
        <member name="M:Nebulator.Common.Utils.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>
            Generates normally distributed numbers.
            </summary>
            <param name="r"></param>
            <param name="mean">Mean</param>
            <param name="sigma">Sigma</param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.Constrain(System.Single,System.Single,System.Single)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Nebulator.Common.Utils.Constrain(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bounds limits a value.
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:Nebulator.Common.WaitCursor">
            <summary>Class that provides a better wait cursor. Clients should use it with using (new WaitCursor()) { slow code }</summary>
        </member>
        <member name="F:Nebulator.Common.WaitCursor.m_cursorOld">
            <summary>Restore original cursor</summary>
        </member>
        <member name="F:Nebulator.Common.WaitCursor._disposedValue">
            <summary>To detect redundant call</summary>
        </member>
        <member name="F:Nebulator.Common.WaitCursor._start">
            <summary>For metrics</summary>
        </member>
        <member name="M:Nebulator.Common.WaitCursor.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Nebulator.Common.WaitCursor.Dispose">
            <summary>Dispose</summary>
        </member>
        <member name="M:Nebulator.Common.WaitCursor.Dispose(System.Boolean)">
            <summary>Dispose</summary>
            <param name="disposing"></param>
        </member>
    </members>
</doc>
